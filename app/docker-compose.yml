version: "3.3"

services:
  #MySQL Service
  db:
    image: mysql:5.7.32
    container_name: db
    restart: unless-stopped
    tty: true
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_USER: ${DB_USERNAME}
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    volumes:
      - dbdata:/var/lib/conf/mysql/
      - ./conf/mysql/my.cnf:/etc/conf/mysql/my.cnf
    networks:
      - app-network
    labels:
      kompose.service.type: nodeport
      kompose.service.expose: true

  #RabbitMQ Service
  rabbitmq3:
    container_name: "rabbitmq"
    image: rabbitmq:3.10.2-management-alpine
    # environment:
    #   - RABBITMQ_DEFAULT_USER=myuser
    #   - RABBITMQ_DEFAULT_PASS=mypassword
    ports:
      # AMQP protocol port
      - "5672:5672"
      # HTTP management UI
      - "15672:15672"
    networks:
      - app-network
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q check_running
      interval: 30s
      timeout: 30s
      retries: 5
    labels:
      kompose.service.type: nodeport
      kompose.service.expose: true

  #Elasticsearch service
  elasticsearch:
    build:
      context: conf/elasticsearch/
    volumes:
      - ./conf/elasticsearch/config/elasticsearch.yml:/usr/share/conf/elasticsearch/config/elasticsearch.yml:ro
      - elasticsearch:/usr/share/conf/elasticsearch/data/:rw
    ports:
      - "127.0.0.1:9200:9200"
      - "127.0.0.1:9300:9300"
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
    networks:
      - app-network
    depends_on:
      - db
      # mysql:
      #   condition: service_started
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --silent --fail localhost:9200/_cluster/health || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
    image: docker.elastic.co/elasticsearch/elasticsearch:7.13.2
    labels:
      kompose.service.type: nodeport
      kompose.service.expose: true

  #PHP Service
  app:
    build:
      args:
        user: ${DB_USERNAME}
        uid: 1000
      context: ./back
      dockerfile: Dockerfile
    image: cloudsigma.com/php
    container_name: app
    restart: unless-stopped
    tty: true
    working_dir: /var/www/
    volumes:
      - ./back:/var/www/
      - ./back/php/laravel.ini:/usr/local/etc/php/conf.d/laravel.ini
    networks:
      - app-network
    environment:
      - SERVICE_NAME=app
      - SERVICE_TAGS=dev
      - APP_NAME=${APP_NAME}
      - APP_ENV=${APP_ENV}
      - APP_KEY=${APP_KEY}
      - APP_DEBUG=${APP_DEBUG}
      - APP_URL=${APP_URL}
      - LOG_CHANNEL=${LOG_CHANNEL}

      - DB_CONNECTION=${DB_CONNECTION}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}

      - BROADCAST_DRIVER=${BROADCAST_DRIVER}
      - CACHE_DRIVER=${CACHE_DRIVER}
      - QUEUE_CONNECTION=${QUEUE_CONNECTION}
      - SESSION_DRIVER=${SESSION_DRIVER}
      - SESSION_LIFETIME=${SESSION_LIFETIME}

      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_VHOST=${RABBITMQ_VHOST}

      - ELASTICSEARCH_URI=${ELASTICSEARCH_URI}
      - ELASTICSEARCH_HOST=${ELASTICSEARCH_HOST}

    labels:
      kompose.service.type: nodeport
      kompose.service.expose: true

  webserver:
    image: nginx:1.17-alpine
    container_name: webserver
    restart: unless-stopped
    tty: true
    #depends_on:
    #  - app
    #  - frontend
    ports:
      - "8000:80"
      - "443:443"
    volumes:
      - ./back:/var/www/
      - ./nginx/conf.d/app.conf:/etc/nginx/conf.d/default.conf
    networks:
      - app-network

  # Frontend Service
  frontend:
    #depends_on:
    #- app
    #- rabbitmq3
    # backend:
    #   condition: service_started
    # rabbitmq3:
    #   condition: service_healthy
    build:
      context: front
      dockerfile: Dockerfile
    restart: always
    ports:
      - 3000:80
    networks:
      - app-network
    labels:
      kompose.service.type: nodeport
      kompose.service.expose: true

  ### INDEXER ###
  indexer:
    depends_on:
      - app
      - rabbitmq3
      # backend:
      #   condition: service_started
      # rabbitmq3:
      #   condition: service_healthy
    build:
      context: indexer
      dockerfile: Dockerfile
    environment:
      - AMQP_URI=${RABBITMQ_URI}
      - ELASTICSEARCH_URI=${ELASTICSEARCH_URI}
    ports:
      - 8081:8081
    networks:
      - app-network
    labels:
      kompose.service.type: nodeport
      kompose.service.expose: true

  ############################## REPORTING ##############################

  reporting:
    depends_on:
      - app
      # backend:
      #   condition: service_started
    build:
      context: reporting
      dockerfile: Dockerfile
    environment:
      - DB_URI=${DB_USERNAME}:${DB_PASSWORD}@tcp(mysql:${DB_PORT})/${DB_DATABASE}
      - WEBHOOK_URL=${WEBHOOK_URL}

    ports:
      - 8888:8888
    networks:
      - app-network
    labels:
      kompose.service.type: nodeport
      kompose.service.expose: true

#Docker Networks
networks:
  app-network:
    driver: bridge
#Volumes
volumes:
  dbdata:
    driver: local
  elasticsearch:
    driver: local
  rabbitmq-data:
    driver: local
